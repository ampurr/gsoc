{
  "hash": "511b3e3748d0ad4bb29bbfbdb6f3b528",
  "result": {
    "markdown": "---\ntitle: \"Setting Up the Animint2 Website\"\ndate: 2023-06-28\ndate-modified: 2023-08-21\n---\n\n\nThis webpage summarizes how I set the animint2 website up. Originally, I wrote this for the animint2 repository. But at some point, I realized that future animint2 contributors won't care about how I set things up. They'll just care about how to maintain the website. So I moved this here.\n\nThis summary is idealized and historically inaccurate. An accurate account would be much more chaotic and contain several swear words.\n\n\n## Get Ready\n\nI first set my working directory to the `animint2` repository. `cd whatever/my/path/is/animint/animint2` gets me there. If I were using RStudio, I could instead use the <kbd>CTRL</kbd><kbd>SHIFT</kbd><kbd>H</kbd> keyboard shortcut and select the `animint2` repository from there.\n\n\n## Making the README\n\nI generated a `README.md` file using [GitHub-flavored Markdown](https://github.github.com/gfm/). The `README` should have, at minimum:\n\n- A section that briefly summarizes what the package is about,\n- A section that teaches the reader how to install both the CRAN and development versions of the package, and\n- A section that briefly demonstrates how to do basic things with the package or links to another page that does.\n\nIn my `README`, I included:\n\n- An About section with a GIF of someone using `animint2`,\n- An Installation section,\n- A Use section that linked to a quick start guide, \n- A Similar Packages section about other packages that created interactive data visualizations, and\n- A Problems? section asking users to report bugs if they find any.\n\nThere was already a `README.org`, but Toby asked me to create a new README and delete the old one.\n\n\n## GitHub Tokens\n\nI needed to access GitHub's API to set up the website. Instead of using my username and password, I had to use my username and a temporary PAT I generated. I guess it's like a better but less convenient password. Luckily, it's easy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\nThis function opened a GitHub webpage. I logged in, generated the token, and saved that somewhere. I then ran\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\nand entered the token when asked.\n\n\n## Build the Site\n\n`pkgdown` makes this easy. I configured the repository to use `pkgdown`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_pkgdown()\n```\n:::\n\n\nThen I built the whole site with this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkgdown::build_site()\n```\n:::\n\n\nThis generated HTML files from our `.Rd` files, and it's this line of code that I run when I need to re-render the website.\n\nWith another line of code, I created a `_pkgdown.yml` file, which influences how the site looks:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_pkgdown_github_pages()\n```\n:::\n\n\nI haven't used this since.\n\n\n## Organize the Site\n\nBy default, the home page is just a mirror image of what's on the `animint2` repository, and the references are in alphabetical order. Not great.\n\nI [rearranged the reference pages](https://pkgdown.r-lib.org/reference/build_reference.html) by adding a `reference` section to the `_pkgdown.yml`. Then I added all of `animint2`'s functions. This took a while due to the sheer number of functions. A couple of tricks that helped me:\n\n- I used `data()` to pull up all the datasets that `animint2` has. (Thirty-three!) Then I copy/pasted the list into a Dataset section in `_pkgdown.yaml`.\n- I used [`ggplot2`'s YAML file](https://github.com/tidyverse/ggplot2/blob/main/_pkgdown.yml) as a reference. `animint2` is a fork of `ggplot2`, so there's lots of similarities. However, I find parts of `ggplot2`'s reference website confusing, so I've elected to organize the functions a little bit differently.\n\nI also made a typo early on. Whoops. Turns out whitespace is relevant in YAML.\n\n\n## Change Appearances\n\nThere are [lots of ways to customize](https://pkgdown.r-lib.org/articles/customise.html) the website. I made typeface changes in the `_pkgdown.yml` file via `template > bslib`. Roboto Condensed and Roboto Mono look nice.\n\nTo make finer and subtler modifications, I created an `extra.css` file in `pkgdown/` and edited the appearance of the site that way. I began with broad changes, like modifying the margins between headings and changing the link color. But I've also made subtler changes to the side bar and to the quick start guide.\n\n\n## Throw it Online\n\nUsing GitHub Pages, there are two ways to make this happen:\n\n1. Upload the `docs/` directory to the GitHub repository.\n2. Get a GitHub Actions workflow going that re-generates the website every time you push a commit.\n\nI don't know how to do the second thing, so I did the first. `pkgdown` adds `docs/` to `.gitignore` by default, so I edited the latter to remove the former. Then I pushed `docs/` to my repository.\n\n\n## Maintain the Website\n\nThe panacea for website maintance is a two-step process:\n\n1. Run `pkgdown::build_site()`, then\n2. Push the changes to the `animint2` repository.\n\nBut `build_site()` can take a while.^[By which I mean minutes, not hours. If it's taking hours, something is wrong!] For quicker and more precise changes, I use`pkgdown`'s [other functions](https://pkgdown.r-lib.org/reference/index.html#build), like `pkgdown::init_site()`.\n\n\n## See Also\n\nSome documentation that was helpful to me when generating the site:\n\n- [Managing GitHub Credentials](https://usethis.r-lib.org/articles/git-credentials.html)\n- [`pkgdown` Documentation](https://pkgdown.r-lib.org/index.html)\n- [Information on `usethis::use_pkgdown`](https://usethis.r-lib.org/reference/use_pkgdown.html)\n- [GitHub-flavored Markdown Specification](https://github.github.com/gfm/)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}