
# Scraps


Bits of code and writing that aren't used in the application, but which I'm keeping around for sentimental reasons. And just in case they become useful again.

##########

```{r setup}
#| include: FALSE
knitr::opts_chunk$set(echo = TRUE,
                      cache = FALSE,
                      autodep = TRUE)
library(whatever)
```

##########

^[C.D. van Borkulo, H.L.J. van der Maas, D. Borsboom, A.O.J. Cramer. [Vulnerability to Depression](https://ccl.northwestern.edu/netlogo/models/community/Vulnerability_To_Depression). _Netlogo_. 2013.]

##########

```{r}
b5 <- read_tsv("b5.tsv")
go_away <- c("race", "age", "engnat", "gender", "hand", "source")
b5c <- b5 |> select(-any_of(go_away))
```

##########

How many countries are there in this dataset, anyway?

```{r}
count_country <- n_distinct(b5c$country)
count_country
```

##########

That's a lot of countries, and most of them have very few responses. Generalizability is affected if _n_ is too small, so I'm going to somewhat arbitrarily keep the ten countries with the largest sample sizes and drop the rest.

```{r}
ten_country <- num_country |> slice(1:10)
ten_country
```

##########

sumscores <- plus_id |> 
  summarize(country = country,
         extraversion = sum(c_across(3:12)), 
         neuroticism = sum(c_across(13:22)), 
         agreeableness = sum(c_across(23:31)), 
         conscientiousness = sum(c_across(33:42)), 
         openness = sum(c_across(43:52)),
         .groups = "keep")

##########

# replace ISO 3166 codes with country names
code2country <- plus_id$country |> 
  case_match("US" ~ "United States", 
             "GB" ~ "United Kingdom", 
             "IN" ~ "India", 
             "AU" ~ "Australia", 
             "CA" ~ "Canada", 
             "PH" ~ "Philippines") |>
  as_tibble() |> mutate(.keep = "unused")
  
I'll also replace the [ISO 3166]{.smallcaps} codes with the actual country names.

# replace ISO 3166 codes with country names
code2country <- plus_id |> select(id, country) |>
  case_match("US" ~ "United States", 
             "GB" ~ "United Kingdom", 
             "IN" ~ "India", 
             "AU" ~ "Australia", 
             "CA" ~ "Canada", 
             "PH" ~ "Philippines")
			 
##########

And, of course, it's immediately obvious without jitter. Last interactive scatterplot of the easy test:

```{r ani-corr-discrete}
#| label: fig-personality-discrete
#| fig-cap: "The discrete nature of the Big Five data."

corr_discrete <- correlations +
  geom_point(alpha = 0.25) + 
  xlim(20, 40) + 
  ylim(20, 40)
animint(corr_discrete)
```

##########

von_count <- combo_tbl |>
  rowwise(extraversion) |>
  count()
von_count <- sumscores |>
  count(Pair = str_c(pmin(extraversion, conscientiousness), "-",
                     pmax(extraversion, conscientiousness)), name = "Count")

penguin <- pmin(sumscores$extraversion, sumscores$conscientiousness)

test_count <- sumscores |> count(penguin,
                                 pmax(extraversion, conscientiousness))

count_ex <- sumscores |> count(extraversion, name = "nex")
count_co <- sumscores |> count(conscientiousness, name = "nco")

##########

### Heatmap Limitations in animint2

There are limitations to what heatmaps can do in `animint2`. There is no interactive heatmap akin to an interactive scatterplot. Since this section is auxiliary to the previous section, I've elected to place my demonstration in a `<details>` element:

<details>
<summary>Click Me for the Demonstration</summary>

First, we generate a similar tibble to the one used by our heatmap. The difference is that our heatmap includes the country column and uses it for the count. For example: in `von_count`, there are 5 rows where both personality factors have a sumscore of 10. In `demon_count`, those 5 rows are still there, but they're divided between Australia and the United States:

```{r demon-tbl}
demon_tbl <- sumscores |> 
  select(country, extraversion, conscientiousness) |>
  expand_grid(.name_repair = "minimal")

demon_count <- demon_tbl |> 
  group_by(across(country:conscientiousness)) |>
  count() |> arrange(extraversion)
demon_count
```

Here is our interactive heatmap. The principal problem with it is that it is not actually interactive, no matter what I do:

```{r demon-heatmap}
#| label: demon-heatmap
#| fig-cap: "Nonresponsive heatmap."

demon_discrete <- demon_count |>
  ggplot(mapping = aes(x = conscientiousness,
                       y = extraversion,
                       fill = n)) +
  geom_tile() + coord_fixed()
animint(demon_discrete)
```

</details>

##########

The `sample_size` argument lets `fn_lln` know the maximum sample size, while the `sampling` argument lets `fn_lln` know how often `data_vector` should be sampled.

##########

d6 <- sample(x = 1:6, size = 10, replace = TRUE)

data_vector <- d6

population_mean <- data_vector |> mean()

# empty vector
sample_means <- vector(mode = "numeric",
                       length = 10)

# random sampling
for (i in seq_along(data_vector)) {
  sample_means[i] <- data_vector |>
    sample(replace = TRUE)
}

# generate tibble
sample_tbl <- sample_means |> tibble::as_tibble()


# Scraps from App

##########

### Week 6 (July 3 to July 9)

The goal this week is to figure out why `animint()` won't correctly render interactive density plots, and then to fix it. [My birthday is this week, so I'll probably take that day off and make up the hours elsewhen.]{.aside}

- 6th weekly meeting.
- The error is that `animint()` fails to render the interactive density plots correctly. It also informs me that "`showSelected` does not work with `StatDensity`."