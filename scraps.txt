
# Scraps


Bits of code and writing that aren't used in the application, but which I'm keeping around for sentimental reasons. And just in case they become useful again.

##########

```{r setup}
#| include: FALSE
knitr::opts_chunk$set(echo = TRUE,
                      cache = FALSE,
                      autodep = TRUE)
library(whatever)
```

##########

^[C.D. van Borkulo, H.L.J. van der Maas, D. Borsboom, A.O.J. Cramer. [Vulnerability to Depression](https://ccl.northwestern.edu/netlogo/models/community/Vulnerability_To_Depression). _Netlogo_. 2013.]

##########

```{r}
b5 <- read_tsv("b5.tsv")
go_away <- c("race", "age", "engnat", "gender", "hand", "source")
b5c <- b5 |> select(-any_of(go_away))
```

##########

How many countries are there in this dataset, anyway?

```{r}
count_country <- n_distinct(b5c$country)
count_country
```

##########

That's a lot of countries, and most of them have very few responses. Generalizability is affected if _n_ is too small, so I'm going to somewhat arbitrarily keep the ten countries with the largest sample sizes and drop the rest.

```{r}
ten_country <- num_country |> slice(1:10)
ten_country
```

##########

sumscores <- plus_id |> 
  summarize(country = country,
         extraversion = sum(c_across(3:12)), 
         neuroticism = sum(c_across(13:22)), 
         agreeableness = sum(c_across(23:31)), 
         conscientiousness = sum(c_across(33:42)), 
         openness = sum(c_across(43:52)),
         .groups = "keep")

##########

# replace ISO 3166 codes with country names
code2country <- plus_id$country |> 
  case_match("US" ~ "United States", 
             "GB" ~ "United Kingdom", 
             "IN" ~ "India", 
             "AU" ~ "Australia", 
             "CA" ~ "Canada", 
             "PH" ~ "Philippines") |>
  as_tibble() |> mutate(.keep = "unused")
  
I'll also replace the [ISO 3166]{.smallcaps} codes with the actual country names.

# replace ISO 3166 codes with country names
code2country <- plus_id |> select(id, country) |>
  case_match("US" ~ "United States", 
             "GB" ~ "United Kingdom", 
             "IN" ~ "India", 
             "AU" ~ "Australia", 
             "CA" ~ "Canada", 
             "PH" ~ "Philippines")
			 
##########

And, of course, it's immediately obvious without jitter. Last interactive scatterplot of the easy test:

```{r ani-corr-discrete}
#| label: fig-personality-discrete
#| fig-cap: "The discrete nature of the Big Five data."

corr_discrete <- correlations +
  geom_point(alpha = 0.25) + 
  xlim(20, 40) + 
  ylim(20, 40)
animint(corr_discrete)
```

##########

von_count <- combo_tbl |>
  rowwise(extraversion) |>
  count()
von_count <- sumscores |>
  count(Pair = str_c(pmin(extraversion, conscientiousness), "-",
                     pmax(extraversion, conscientiousness)), name = "Count")

penguin <- pmin(sumscores$extraversion, sumscores$conscientiousness)

test_count <- sumscores |> count(penguin,
                                 pmax(extraversion, conscientiousness))

count_ex <- sumscores |> count(extraversion, name = "nex")
count_co <- sumscores |> count(conscientiousness, name = "nco")

##########

### Heatmap Limitations in animint2

There are limitations to what heatmaps can do in `animint2`. There is no interactive heatmap akin to an interactive scatterplot. Since this section is auxiliary to the previous section, I've elected to place my demonstration in a `<details>` element:

<details>
<summary>Click Me for the Demonstration</summary>

First, we generate a similar tibble to the one used by our heatmap. The difference is that our heatmap includes the country column and uses it for the count. For example: in `von_count`, there are 5 rows where both personality factors have a sumscore of 10. In `demon_count`, those 5 rows are still there, but they're divided between Australia and the United States:

```{r demon-tbl}
demon_tbl <- sumscores |> 
  select(country, extraversion, conscientiousness) |>
  expand_grid(.name_repair = "minimal")

demon_count <- demon_tbl |> 
  group_by(across(country:conscientiousness)) |>
  count() |> arrange(extraversion)
demon_count
```

Here is our interactive heatmap. The principal problem with it is that it is not actually interactive, no matter what I do:

```{r demon-heatmap}
#| label: demon-heatmap
#| fig-cap: "Nonresponsive heatmap."

demon_discrete <- demon_count |>
  ggplot(mapping = aes(x = conscientiousness,
                       y = extraversion,
                       fill = n)) +
  geom_tile() + coord_fixed()
animint(demon_discrete)
```

</details>

##########

The `sample_size` argument lets `fn_lln` know the maximum sample size, while the `sampling` argument lets `fn_lln` know how often `data_vector` should be sampled.

##########

d6 <- sample(x = 1:6, size = 10, replace = TRUE)

data_vector <- d6

population_mean <- data_vector |> mean()

# empty vector
sample_means <- vector(mode = "numeric",
                       length = 10)

# random sampling
for (i in seq_along(data_vector)) {
  sample_means[i] <- data_vector |>
    sample(replace = TRUE)
}

# generate tibble
sample_tbl <- sample_means |> tibble::as_tibble()

##########

[For self-evident reasons, `lln.ani` calls the mean `mu`. As you can tell from my code, I prefer to trade brevity for extreme obviousness. Hence `population_mean`.]{.aside}


# Scraps from App

##########

### Week 6 (July 3 to July 9)

The goal this week is to figure out why `animint()` won't correctly render interactive density plots, and then to fix it. [My birthday is this week, so I'll probably take that day off and make up the hours elsewhen.]{.aside}

- 6th weekly meeting.
- The error is that `animint()` fails to render the interactive density plots correctly. It also informs me that "`showSelected` does not work with `StatDensity`."

##########

## Hard Test: Testing `fn_lln`

Does `fn_lln` work right? Let's do some unit testing with `testthat` and see.


### Do the Components Work Right?

`fn_lln` is not an especially complex function---it's only about 50 lines of code---

First, let's ensure that the validity check is working right. `fn_lln` needs to accept a vector like `d6` (which is numeric, non-empty, and contains no `NA` values).

```{r test-validity-check}
test_that("accepts numeric non-empty vectors that contain no NA values", {
  expect_no_condition(
    fn_lln(data_vector = d6))
  }
)
```

It also needs to reject vectors that are non-numeric, empty, and contains `NA` values.

```{r test-validity-check-2}
# non-numeric
d24 <- sample(letters, size = 100, replace = TRUE)

# empty
d0 <- vector() |> as.numeric()

# contains NAs
dNA <- c(NA, NA, 1) |> as.numeric()

test_that("throws error message when the data_vector is non-numeric, empty, or contains NA values", {
  expect_error(
    fn_lln(data_vector = d24) ||
      ffn_lln(data_vector = d0) ||
      ffn_lln(data_vector = dNA))
  }
)
```

Both pass. Nice.

Next, we need to ensure that 

Next, we need to ensure that `population_mean` correctly generates the population mean.

```{r tvc-3}
# d1 <- c(1)
# 
# fn_lln(d1)
# 
# test_that("correctly generates population mean", {
#   fn_lln(1)
#   expect_equal(population_mean, 1)
# })

```


### Does it Work Right in General?

empty

##########

Readers are likely most interested in the "Making Changes to the Website" and "See Also" sections. The "Build the Site" section is useful if the website needs to be rebuilt.

[...]

## Making Changes to the Website

The website works, but it's disordered. The site is mostly a mix of the Github README and the official `animint2` documentation on CRAN. It could be better.

##########

<!--
- I deleted the `fortify.r` and `fortify.foo.r` files in the `R/` directory. (Technically the opposite of creation.)
- Then I ran `build.sh` to rebuild the `DESCRIPTION` and got rid of the unnecessary `fortify.foo.Rd` files. It also removed the `borders.Rd` and `map_data.Rd` files.
- Removed `maptools` as a DESCRIPTION suggest.
- Manually removed all links to the deleted files. This involved editing the following 5 files in the `R/` directory, which altered 38 files in the `man/` directory via `build.sh`. Those 5 R files were:
  + `annotation_map.r`
  + `autoplot.r`
  + `plot.r`
  + `layer.r`
  + `geom-map.r`
- Updated the DESCRIPTION from version 2023.3.14 to 2023.6.6
- Updated NEWS by briefly mentioning all the changes I made.
- Made a pull request with the aforementioned changes and linked it to [issue 89](https://github.com/tdhock/animint2/issues/89) on GitHub.

### Debugging

`build.sh` throws up a number of error messages, which can be found in `00check.log`. Two and two of those messages are "Running examples in 'animint2-Ex.R' failed" and "Running the tests in 'tests/testthat.R' failed," respectively.

The reason why the running examples fail seem to be related to the following error message: "Error in `FUN(X[[i]], ...)`: numeric 'envir' arg not of length one." I know this is code from the `ggplot2` side of things. `ripgrep-all` doesn't turn anything up, which suggests that it's not a manually written error message.

One hypothesis is that this is associated with changes that I made. To test this hypothesis, I made a new branch stemming from the unchanged main branch, `89-bug-exam-unaltered-main-branch`. Then I ran `build.sh`. Consistent with this hypothesis, `build.sh` did not output the same errors. Assuming that the hypothesis is correct---that it is my fault---also means the problem is not with `build.sh`.^[It does seem to have problems rendering the PDF, but that's a problem for future me.] So I should stop playing around with it and looking up bash stuff. That's not relevant.

Follow-up hypothesis...
-->

##########

<!-- simple-examples using morley -->

---
title: "Simple Examples"
---


## Introduction

Here are a few simple examples. They use speed of light measurements from R's [`morley` dataset](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/morley.html). For more complex examples, take a look at chapters 8 through 18 of the [animint2 Manual](https://rcdata.nau.edu/genomic-ml/animint2-manual/Ch00-preface.html) or at the [animint gallery](https://rcdata.nau.edu/genomic-ml/animint-gallery/).

The following graphs use some classic measurements of the speed of light from R's 

```{r}
library(animint2)
data("morley")

# So that the line graph will visually
# separate the data by experiment:
morley$Expt <- as.character(morley$Expt)
```


## Static Graphs

First, a static graph. Most of what you can do in `ggplot2` you can do in `animint2`, too, using the same grammar of graphics:

```{r}
light <- morley |> 
  ggplot() +
  geom_line() +
  geom_point() +
  aes(x = Run, y = Speed, color = Expt, group = Expt) +
  labs(title = "Some Classic Experiments on the Speed of Light")
light
```


## Interactive Exploratory Data Analysis

But the reason why you want to use `animint2` (versus `ggplot2`) is because of the former's support for interactive data visualizations. It's easy to render a graph interactive:

```{r}
animint(light)
```

By clicking on the legend or by using the selection menu, you can control which experiments have their data graphed, as well as how many. This allows you to explore your data without needing to facet all possible experiment combinations.


## Presenting Data

`animint2` also gives you control over how you present your data. Say you want to emphasize experiments 4 and 5. In `animint2`, you would use the `first` option and specify which experiments to present:

```{r}
light_2 <- animint(light)
light_2$first <- list(Expt = c("4", "5"))
light_2
```

##########

<!-- simple examples using Theoph -->

---
title: "Simple Examples"
---


## Introduction

It's pretty easy to make most of the graphs you want with `animint2`. The following data visualizations demonstrate some of `animint2`'s capabilities. They graph biomedical data on theophylline, a drug used to treat asthma and some lung diseases. The data are from R's [`Theoph` dataset](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/Theoph.html).

`animint2` is also capable of generating larger and more complex data visualizations. For examples, take a look at chapters 8 through 18 of the [animint2 Manual](https://rcdata.nau.edu/genomic-ml/animint2-manual/Ch00-preface.html) or at the [animint gallery](https://rcdata.nau.edu/genomic-ml/animint-gallery/).

```{r, include = FALSE}
data("Theoph")
Theoph <- Theoph[1:99, ]
Theoph$Subject <- as.character(Theoph$Subject)
```


## Static Graphs

Here are the data:

```{r}
Theoph
```

Using the same grammar of graphics, you can generate static graphs in `animint2` the same way you generate them in `ggplot2`:

```{r}
library(animint2)

conc_over_time <- Theoph |>
  ggplot() +
  geom_line() +
  aes(x = Time, y = conc, 
      color = Subject, group = Subject) +
  labs(title = "Pharmacokinetics of Theophylline",
       x = "Time (Hours)", 
       y = "Concentration (mg/L)")
conc_over_time
```


## Interactive Graphs

But the reason why you want to use `animint2` (versus `ggplot2`) is because of the former's support for interactive data visualizations. It's easy to render a graph interactive:

```{r}
animint(conc_over_time)
```

By clicking on the legend or by using the selection menu, you can control which subjects have their data graphed, as well as how many. This allows you to explore your data without needing to facet all possible subject combinations.

`animint2` also gives you control over how you present your data. Say you want to emphasize subjects 1 and 6. In `animint2`, you would use the `first` option and specify which subjects to present:

```{r}
cot_2 <- animint(conc_over_time)
cot_2$first <- list(Subject = c("1", "6"))
cot_2
```


## More Complex Examples

You can use the `showSelected` and `clickSelects` keywords to gain finer control on what and how data appear. They are especially useful if you have many variables in your data and want to gain a broad understanding of how some of them interact.

`showSelected` is useful if you're curious about how the interaction between two variables changes given changes in some other variable (like time). Using the `time` option, you can even animate the interaction:

```{r}
dose_conc_over_time <- Theoph |>
  ggplot() +
  geom_jitter() +
  aes(x = Dose, y = conc, 
      color = Subject, group = Subject)
  # labs(title = "Pharmacokinetics of Theophylline",
  #      x = "Time (Hours)", 
  #      y = "Concentration (mg/L)")
dose_conc_over_time
```

`animint2` also allows you to facet two graphs together, causing one graph to vary when another does.

##########

set.seed(27)

# simulate data
Day <- rep(x = 1:25, each = 4)
Subject <- rep(x = c("Big Dog", "Junebug", "Kitty", "Teddy Bear"), times = 25)
#Approval <- sample(x = 80:100, size = 100, replace = TRUE)
Approval <- sample(x = 75:100, size = 100, replace = TRUE)
Happiness <- sample.int(n = 100, size = 100, replace = TRUE)
Cravings <- sample.int(n = 100, size = 100, replace = TRUE)

# concatenate into dataframe
sammys_reign <- data.frame(Day, Subject, Approval, Happiness, Cravings)

##########

### notes on `animint()`

On a related note, while going through the Animint2 Manual and the reference manual, I finally figured out why I find the reference manual so difficult to use.

At first, I thought it was the reference's PDF-ness and its alphabetical-order-ness. I was wrong.

I now think the two major reasons why the reference manual is difficult to use are:

1. Many of the functions in the reference manual are not useful to the average user. (Will I ever use `fortify()`? No.) That's not a problem. It's just a matter of rearranging the functions on the website.
2. The reference documentation for `animint()`, the heart of the `animint2` package, is mostly useful if you already know how to use `animint()` and just want a refresher. For a newbie, its utility is limited.

I have a lot of sympathy re:

##########

Take a look:

```{r}
cute_and_cool <- meowtrics |>
  ggplot() +
  geom_point() +
  aes(x = Coolness, y = Cuteness, group = Cat, color = Cat) +
  labs(title = "Associations Between Cuteness and Coolness")

cute_again <- cute_1
```

<table>
  <tr>
    <td>
      ```{r}
      cute_and_cool
      ```
    <td>
      ```{r}
      cute_again
      ```
</table>

A data visualization is composed of parts. Using `facet_grid()`,

##########

`showSelected` is useful if you're curious about how the interaction between two variables changes given changes in some other variable (like time). Using the `time` option, you can even animate the interaction.

You can use the `showSelected` and `clickSelects` keywords to gain finer control on what and how data appear. They are especially useful if you have many variables in your data and want to gain a broad understanding of how some of them interact.

##########

Regarding the animints in `vignettes/` versus `articles/`: Using the Windows equivalent of diff, `fc.exe`, reveals no differences between the files. So why won't the webpage use it to render the animints? 😭

I found this [old issue](https://github.com/r-lib/pkgdown/issues/1689) about it, but that seems to have been resolved...

##########

<ol class="annotated">
	<li>I begin with the dataset, called `meowtrics`.
	<li>I pipe it into `ggplot()`, which tells `animint2` that I'm creating a data visualization.
	<li>I declare that it's a scatterplot using `geom_point()`.
	<li>I draw the axes of the graph with `aes()`. I place the time category in the x-axis and the cuteness ratings in the y-axis (the `x = Day` and `y = Cuteness` arguments, respectively). Using the `group` and `color` arguments, I also group the data together by the cat and color-code them.
	<li>I give the graph a title using `labs()` and its `title` argument.
</ol> <!-- Why use HTML instead of Markdown's syntax for ordered lists? I need to control the appearance of this specific ordered list. With Markdown, it's impossible. If you can figure out a way to do that, feel free to change the syntax. :> -->

##########

ol.annotated > li::marker {
	content: "#"counter(list-item)" ";
	border: 1.4px solid;
	border-radius: 200px;
	padding: 0.05rem 0.5rem;
	font-size: 0.9rem;   /* for consistency with code annotations;
                            the content and counter stuff lets me
                            mimic how the code annotation looks */
}

##########

<dl class="annotated">
	<dt>#1
		<dd>I begin with the dataset, called `meowtrics`.
	<dt>#2
		<dd>I pipe it into `ggplot()`, which tells `animint2` that I'm creating a data visualization.
	<dt>#3
		<dd>I declare that it's a scatterplot using `geom_point()`.
	<dt>#4
		<dd>I draw the axes of the graph with `aes()`. I place the time category in the x-axis and the cuteness ratings in the y-axis (the `x = Day` and `y = Cuteness` arguments, respectively). Using the `group` and `color` arguments, I also group the data together by the cat and color-code them.
	<dt>#5
		<dd>I give the graph a title using `labs()` and its `title` argument.
</dl> <!-- Yup! A <dl>. You don't see these often. -->

##########

dl.annotated > dt {
	border: 1.4px solid #212529;
	border-radius: 200px;
	padding: 0.05rem 0.5rem;
	font-size: 0.9rem;   /* for consistency with code annotations */
}

##########

## What Do I Need to Do?

Here's a flowchart that depicts all the possible reasons for maintenance that I can think of, as well as the actions that you ought to perform to maintain the site. Since there's only some many words I can reasonably fit into a flowchart, some of the nodes direct you to another part of this document.

``` mermaid
flowchart TD
	A(["I have made changes to the animint2 repository."]) -- TRUE --> B(["I added a function to the animint2 package."])
	A -- FALSE --> C(["You don't need to do anything"])
	B -- TRUE --> D(["See: I Added a Function"])
	B -- FALSE --> E(["I'm seeing error messages about GitHub access tokens or PATs."])
	E -- TRUE --> F(["See: Refreshing the GitHub Access Token"])
	E -- FALSE --> G(["I pushed some commits to GitHub. Now the website is wonky or has stopped working."])
	G -- TRUE --> H(["See: Mistakes"])
	G -- FALSE --> I(["I made changes to the repository that should have showed up on the website, but they haven't."])
	I -- TRUE --> J(["See: The Basics"])
	I -- FALSE --> K(["I made changes to the extra.css or extra.js files, but they haven't showed up on the website."])
	K -- TRUE --> L(["See: The Basics"])
```
Aside: If you're blind or can't see well---sorry about this. This flowchart uses Mermaid, and Mermaid is not screenreader-friendly. If anyone knows of any accessible alternatives, please replace the Mermaid diagram. Thanks.

##########

Here's how the data would look if it were visualized as a smoothed line graph instead:

```{r}
cute_2 <- meowtrics |>
  ggplot() +
  geom_smooth(se = FALSE) +
  aes(x = Day, y = Cuteness, color = Cat, group = Cat) +
  labs(title = "Cat Cuteness Ratings Over Time")
cute_2
```

The sole difference is that we've replaced the points with smoothed lines. (By default, `geom_smooth()` uses `loess()`.) For stylistic reasons, I've also used the `se = FALSE` argument to remove the confidence internals around the lines.

It's also possible to have both the points and smoothed lines in one graph. Just use both the `geom_point()` abd `geom_smooth()` arguments in the same data visualization:

```{r}
cute_3 <- meowtrics |>
  ggplot() +
  geom_point() + 
  geom_smooth(se = FALSE) +
  aes(x = Day, y = Cuteness, color = Cat, group = Cat) +
  labs(title = "Cat Cuteness Ratings Over Time")
cute_3
```

##########

fig.alt = "This is the same scatterplot you saw in the previous image. But now it's interactive."
fig.alt = "This is the same scatterplot again, except that all the data have been removed except for Archibald's and Muffin's. It shows the same upward trend as the previous two scatterplots."
fig.alt = "An interactive scatterplot demonstrating..."